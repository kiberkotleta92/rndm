// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package random

import (
	json "encoding/json"

	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonFe2abc99DecodeRndmRandom(in *jlexer.Lexer, out *RandomResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int64(in.Int64())
		case "jsonrpc":
			out.Jsonrpc = string(in.String())
		case "result":
			easyjsonFe2abc99Decode(in, &out.Result)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFe2abc99EncodeRndmRandom(out *jwriter.Writer, in RandomResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.ID))
	}
	{
		const prefix string = ",\"jsonrpc\":"
		out.RawString(prefix)
		out.String(string(in.Jsonrpc))
	}
	{
		const prefix string = ",\"result\":"
		out.RawString(prefix)
		easyjsonFe2abc99Encode(out, in.Result)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v RandomResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFe2abc99EncodeRndmRandom(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RandomResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFe2abc99EncodeRndmRandom(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *RandomResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFe2abc99DecodeRndmRandom(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RandomResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFe2abc99DecodeRndmRandom(l, v)
}
func easyjsonFe2abc99Decode(in *jlexer.Lexer, out *struct {
	AdvisoryDelay int64 `json:"advisoryDelay"`
	BitsLeft      int64 `json:"bitsLeft"`
	BitsUsed      int64 `json:"bitsUsed"`
	Random        struct {
		CompletionTime string        `json:"completionTime"`
		Data           []interface{} `json:"data"`
	} `json:"random"`
	RequestsLeft int64 `json:"requestsLeft"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "advisoryDelay":
			out.AdvisoryDelay = int64(in.Int64())
		case "bitsLeft":
			out.BitsLeft = int64(in.Int64())
		case "bitsUsed":
			out.BitsUsed = int64(in.Int64())
		case "random":
			easyjsonFe2abc99Decode1(in, &out.Random)
		case "requestsLeft":
			out.RequestsLeft = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFe2abc99Encode(out *jwriter.Writer, in struct {
	AdvisoryDelay int64 `json:"advisoryDelay"`
	BitsLeft      int64 `json:"bitsLeft"`
	BitsUsed      int64 `json:"bitsUsed"`
	Random        struct {
		CompletionTime string        `json:"completionTime"`
		Data           []interface{} `json:"data"`
	} `json:"random"`
	RequestsLeft int64 `json:"requestsLeft"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"advisoryDelay\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.AdvisoryDelay))
	}
	{
		const prefix string = ",\"bitsLeft\":"
		out.RawString(prefix)
		out.Int64(int64(in.BitsLeft))
	}
	{
		const prefix string = ",\"bitsUsed\":"
		out.RawString(prefix)
		out.Int64(int64(in.BitsUsed))
	}
	{
		const prefix string = ",\"random\":"
		out.RawString(prefix)
		easyjsonFe2abc99Encode1(out, in.Random)
	}
	{
		const prefix string = ",\"requestsLeft\":"
		out.RawString(prefix)
		out.Int64(int64(in.RequestsLeft))
	}
	out.RawByte('}')
}
func easyjsonFe2abc99Decode1(in *jlexer.Lexer, out *struct {
	CompletionTime string        `json:"completionTime"`
	Data           []interface{} `json:"data"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "completionTime":
			out.CompletionTime = string(in.String())
		case "data":
			if in.IsNull() {
				in.Skip()
				out.Data = nil
			} else {
				in.Delim('[')
				if out.Data == nil {
					if !in.IsDelim(']') {
						out.Data = make([]interface{}, 0, 4)
					} else {
						out.Data = []interface{}{}
					}
				} else {
					out.Data = (out.Data)[:0]
				}
				for !in.IsDelim(']') {
					var v1 interface{}
					if m, ok := v1.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v1.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v1 = in.Interface()
					}
					out.Data = append(out.Data, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFe2abc99Encode1(out *jwriter.Writer, in struct {
	CompletionTime string        `json:"completionTime"`
	Data           []interface{} `json:"data"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"completionTime\":"
		out.RawString(prefix[1:])
		out.String(string(in.CompletionTime))
	}
	{
		const prefix string = ",\"data\":"
		out.RawString(prefix)
		if in.Data == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.Data {
				if v2 > 0 {
					out.RawByte(',')
				}
				if m, ok := v3.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v3.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v3))
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}
func easyjsonFe2abc99DecodeRndmRandom1(in *jlexer.Lexer, out *RandomRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int64(in.Int64())
		case "jsonrpc":
			out.Jsonrpc = string(in.String())
		case "method":
			out.Method = string(in.String())
		case "params":
			if m, ok := out.Params.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.Params.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.Params = in.Interface()
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFe2abc99EncodeRndmRandom1(out *jwriter.Writer, in RandomRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.ID))
	}
	{
		const prefix string = ",\"jsonrpc\":"
		out.RawString(prefix)
		out.String(string(in.Jsonrpc))
	}
	{
		const prefix string = ",\"method\":"
		out.RawString(prefix)
		out.String(string(in.Method))
	}
	{
		const prefix string = ",\"params\":"
		out.RawString(prefix)
		if m, ok := in.Params.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.Params.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.Params))
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v RandomRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFe2abc99EncodeRndmRandom1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RandomRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFe2abc99EncodeRndmRandom1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *RandomRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFe2abc99DecodeRndmRandom1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RandomRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFe2abc99DecodeRndmRandom1(l, v)
}
func easyjsonFe2abc99DecodeRndmRandom2(in *jlexer.Lexer, out *GenerateInteger) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "apiKey":
			out.APIKey = string(in.String())
		case "max":
			out.Max = int(in.Int())
		case "min":
			out.Min = int(in.Int())
		case "n":
			out.N = int(in.Int())
		case "replacement":
			out.Replacement = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFe2abc99EncodeRndmRandom2(out *jwriter.Writer, in GenerateInteger) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"apiKey\":"
		out.RawString(prefix[1:])
		out.String(string(in.APIKey))
	}
	{
		const prefix string = ",\"max\":"
		out.RawString(prefix)
		out.Int(int(in.Max))
	}
	{
		const prefix string = ",\"min\":"
		out.RawString(prefix)
		out.Int(int(in.Min))
	}
	{
		const prefix string = ",\"n\":"
		out.RawString(prefix)
		out.Int(int(in.N))
	}
	{
		const prefix string = ",\"replacement\":"
		out.RawString(prefix)
		out.Bool(bool(in.Replacement))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GenerateInteger) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFe2abc99EncodeRndmRandom2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GenerateInteger) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFe2abc99EncodeRndmRandom2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GenerateInteger) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFe2abc99DecodeRndmRandom2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GenerateInteger) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFe2abc99DecodeRndmRandom2(l, v)
}
func easyjsonFe2abc99DecodeRndmRandom3(in *jlexer.Lexer, out *GenerateGaussians) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "apiKey":
			out.APIKey = string(in.String())
		case "mean":
			out.Mean = float32(in.Float32())
		case "standardDeviation":
			out.SD = float32(in.Float32())
		case "n":
			out.N = int(in.Int())
		case "significantDigits":
			out.Digits = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFe2abc99EncodeRndmRandom3(out *jwriter.Writer, in GenerateGaussians) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"apiKey\":"
		out.RawString(prefix[1:])
		out.String(string(in.APIKey))
	}
	{
		const prefix string = ",\"mean\":"
		out.RawString(prefix)
		out.Float32(float32(in.Mean))
	}
	{
		const prefix string = ",\"standardDeviation\":"
		out.RawString(prefix)
		out.Float32(float32(in.SD))
	}
	{
		const prefix string = ",\"n\":"
		out.RawString(prefix)
		out.Int(int(in.N))
	}
	{
		const prefix string = ",\"significantDigits\":"
		out.RawString(prefix)
		out.Int(int(in.Digits))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GenerateGaussians) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFe2abc99EncodeRndmRandom3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GenerateGaussians) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFe2abc99EncodeRndmRandom3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GenerateGaussians) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFe2abc99DecodeRndmRandom3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GenerateGaussians) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFe2abc99DecodeRndmRandom3(l, v)
}
func easyjsonFe2abc99DecodeRndmRandom4(in *jlexer.Lexer, out *API) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Token":
			out.Token = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFe2abc99EncodeRndmRandom4(out *jwriter.Writer, in API) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Token\":"
		out.RawString(prefix[1:])
		out.String(string(in.Token))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v API) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFe2abc99EncodeRndmRandom4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v API) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFe2abc99EncodeRndmRandom4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *API) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFe2abc99DecodeRndmRandom4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *API) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFe2abc99DecodeRndmRandom4(l, v)
}
